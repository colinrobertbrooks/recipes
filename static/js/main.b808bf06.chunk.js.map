{"version":3,"sources":["utils/filterRecipes.ts","utils/getRecipeTypeOptions.ts","utils/deserializeRecipes.ts","utils/sortRecipes.ts","api.ts","components/Counter.tsx","components/Recipe.tsx","components/SearchFilter.tsx","components/App.tsx","components/Root.tsx","index.tsx"],"names":["filterRecipes","recipes","filters","recipeTypeQuery","recipeNameQuery","filter","recipe","booleans","push","type","name","toLowerCase","search","every","Boolean","getTypes","map","reduce","options","includes","getRecipeTypeOptions","currentValue","typesInRecipes","enabledTypes","sort","a","b","localeCompare","value","active","disabled","deserializeRecipes","values","headRow","bodyRows","data","forEach","row","datum","val","valIdx","id","link","notes","sortRecipes","adapter","axios","create","baseURL","defaultSpreadsheetId","defaultRange","defaultKey","spreadsheetId","key","get","response","Error","Counter","count","role","aria-live","className","CardWrapper","styled","div","CardHeader","h2","CardLink","Button","CardNotes","p","attrs","Recipe","nameQuery","shouldShowType","Card","CardBody","data-testid","highlightClassName","searchWords","textToHighlight","aria-label","color","href","target","rel","ClearIconWrapper","span","SearchFilter","recipeType","recipeTypeOptions","handleRecipeTypeChange","recipeName","handleRecipeNameChange","handleClear","selectedRecipeType","useState","typeDropdownIsOpen","setTypeDropdownIsOpen","InputGroup","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","outline","caret","DropdownMenu","DropdownItem","onClick","undefined","Input","placeholder","onChange","event","currentTarget","spellCheck","InputGroupAddon","aria-hidden","SearchFilterCounterWrapper","App","useQueryParam","StringParam","loading","setLoading","error","setError","setRecipes","setRecipeType","setRecipeNameQuery","filteredRecipes","useEffect","api","nextRecipes","fetchRecipes","Container","Row","Col","xs","size","offset","sm","md","lg","length","Root","ReactRouterRoute","Route","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b808bf06.chunk.js","sourcesContent":["import { IRecipe, IFilters } from '../types';\n\nconst filterRecipes = ({\n  recipes,\n  filters\n}: {\n  recipes: IRecipe[];\n  filters: IFilters;\n}): IRecipe[] => {\n  const { recipeTypeQuery, recipeNameQuery } = filters;\n\n  return recipes.filter(recipe => {\n    const booleans = [];\n\n    if (recipeTypeQuery) {\n      booleans.push(recipe.type === recipeTypeQuery);\n    }\n\n    if (recipeNameQuery) {\n      booleans.push(\n        recipe.name.toLowerCase().search(recipeNameQuery.toLowerCase()) !== -1\n      );\n    }\n\n    return booleans.every(Boolean);\n  });\n};\n\nexport default filterRecipes;\n","import { IFilters, IRecipe, IRecipeTypeOption } from '../types';\nimport filterRecipes from './filterRecipes';\n\nconst getTypes = (recipes: IRecipe[]): string[] =>\n  recipes\n    .map(({ type }) => type)\n    .reduce((options: string[], type) => {\n      if (!options.includes(type)) {\n        options.push(type);\n      }\n      return options;\n    }, []);\n\nconst getRecipeTypeOptions = ({\n  recipes,\n  filters,\n  currentValue\n}: {\n  recipes: IRecipe[];\n  filters: IFilters;\n  currentValue: string | null | undefined;\n}): IRecipeTypeOption[] => {\n  const typesInRecipes = getTypes(recipes);\n  const enabledTypes = getTypes(\n    filterRecipes({ recipes, filters: { ...filters, recipeTypeQuery: null } })\n  );\n\n  return typesInRecipes\n    .sort((a, b) => a.localeCompare(b))\n    .map(value => ({\n      value,\n      active: value === currentValue,\n      disabled: !enabledTypes.includes(value)\n    }));\n};\n\nexport default getRecipeTypeOptions;\n","import { TSpreadsheetDatum, IRecipe } from '../types';\n\nconst deserializeRecipes = (values: string[][]): IRecipe[] => {\n  const [headRow, ...bodyRows] = values;\n  const data: TSpreadsheetDatum[] = [];\n  bodyRows.forEach(row => {\n    const datum: TSpreadsheetDatum = {};\n    row.forEach((val, valIdx) => {\n      datum[headRow[valIdx]] = val;\n    });\n    data.push(datum);\n  });\n\n  return data.map(({ name, type, link, notes }, id) => {\n    return {\n      id,\n      name,\n      type,\n      link,\n      notes: notes || null\n    };\n  });\n};\n\nexport default deserializeRecipes;\n","import { IRecipe } from '../types';\n\nconst sortRecipes = (recipes: IRecipe[]): IRecipe[] =>\n  recipes.sort((a, b) => a.name.localeCompare(b.name));\n\nexport default sortRecipes;\n","import axios from 'axios';\nimport { IRecipe } from './types';\nimport { deserializeRecipes } from './utils';\n\nexport const adapter = axios.create({\n  baseURL: 'https://sheets.googleapis.com/v4/spreadsheets'\n});\n\nexport const defaultSpreadsheetId =\n  '106-nwBqrxeCGMSY0ZOUAjRvlbL2b2xAJgPy67M_Btc8';\nexport const defaultRange = 'Recipes';\nexport const defaultKey = 'AIzaSyAqCMNvKSDiOb0yIAjLF2Z1T5gSsAetaVA';\n\nexport default {\n  async getRecipes(\n    spreadsheetId: string | null | undefined = defaultSpreadsheetId,\n    key: string | null | undefined = defaultKey\n  ): Promise<IRecipe[]> {\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get\n    try {\n      const response = await adapter.get(\n        `${spreadsheetId}/values/${defaultRange}?key=${key}`\n      );\n      return deserializeRecipes(response.data.values);\n    } catch (err) {\n      throw new Error('Error fetching recipes');\n    }\n  }\n};\n","import React from 'react';\n\ninterface ICounterProps {\n  count: number;\n}\n\nconst Counter: React.FC<ICounterProps> = ({ count }) => (\n  <small role=\"alert\" aria-live=\"polite\" className=\"text-muted font-italic\">\n    {count} {count === 1 ? 'recipe' : 'recipes'}\n  </small>\n);\n\nexport default Counter;\n","import React from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport styled from 'styled-components';\nimport { IRecipe } from '../types';\n\nexport interface IRecipeProps extends Omit<IRecipe, 'id'> {\n  nameQuery: string | null | undefined;\n  shouldShowType: boolean;\n}\n\nconst Recipe: React.FC<IRecipeProps> = ({\n  name,\n  type,\n  link,\n  notes,\n  nameQuery,\n  shouldShowType\n}) => (\n  <CardWrapper>\n    <Card>\n      <CardBody>\n        <CardHeader>\n          <Highlighter\n            data-testid=\"recipe-name\"\n            highlightClassName=\"highlight-word-search\"\n            searchWords={[nameQuery || '']}\n            textToHighlight={name}\n          />\n          {shouldShowType && <small className=\"text-muted\"> ({type})</small>}\n        </CardHeader>\n        <CardLink\n          aria-label={`Recipe for ${name}`}\n          color=\"primary\"\n          href={link}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Recipe\n        </CardLink>\n        {notes && <CardNotes>&quot;{notes}&quot;</CardNotes>}\n      </CardBody>\n    </Card>\n  </CardWrapper>\n);\n\nconst CardWrapper = styled.div`\n  margin-bottom: 12px;\n`;\n\nconst CardHeader = styled.h2`\n  font-size: 1.5rem;\n  margin-bottom: 12px;\n`;\n\nconst CardLink = styled(Button)`\n  @media (max-width: 576px) {\n    display: block;\n  }\n`;\n\nconst CardNotes = styled.p.attrs({ className: 'text-muted' })`\n  margin-top: 8px;\n  margin-bottom: 0;\n  font-size: 0.95rem;\n  font-style: italic;\n`;\n\nexport default Recipe;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButtonDropdown\n} from 'reactstrap';\nimport styled from 'styled-components';\nimport { IRecipeTypeOption } from '../types';\n\ninterface ISearchFilterProps {\n  recipeType: string | null | undefined;\n  recipeTypeOptions: IRecipeTypeOption[];\n  handleRecipeTypeChange: (nextRecipeType: string | null | undefined) => void;\n  recipeName: string | null | undefined;\n  handleRecipeNameChange: (\n    nextRecipeNameSearch: string | null | undefined\n  ) => void;\n  handleClear: () => void;\n}\n\nconst SearchFilter: React.FC<ISearchFilterProps> = ({\n  recipeType,\n  recipeTypeOptions,\n  handleRecipeTypeChange,\n  recipeName,\n  handleRecipeNameChange,\n  handleClear\n}) => {\n  const selectedRecipeType = recipeType || 'All';\n  const [typeDropdownIsOpen, setTypeDropdownIsOpen] = useState(false);\n  const toggleTypeDropdown = () => setTypeDropdownIsOpen(!typeDropdownIsOpen);\n\n  return (\n    <InputGroup>\n      <InputGroupButtonDropdown\n        addonType=\"prepend\"\n        isOpen={typeDropdownIsOpen}\n        toggle={toggleTypeDropdown}\n      >\n        <DropdownToggle\n          aria-label={`filter recipe type ${selectedRecipeType}`}\n          color=\"primary\"\n          outline\n          caret\n        >\n          {selectedRecipeType}\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem\n            active={recipeType === null}\n            onClick={() => handleRecipeTypeChange(undefined)}\n          >\n            All\n          </DropdownItem>\n          {recipeTypeOptions.map(({ value, active, disabled }) => (\n            <DropdownItem\n              key={value}\n              active={active}\n              disabled={disabled}\n              onClick={() => handleRecipeTypeChange(value)}\n            >\n              {value}\n            </DropdownItem>\n          ))}\n        </DropdownMenu>\n      </InputGroupButtonDropdown>\n      <Input\n        placeholder=\"search recipe names\"\n        className=\"text-center\"\n        value={recipeName || ''}\n        onChange={event => handleRecipeNameChange(event.currentTarget.value)}\n        spellCheck={false}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <Button\n          aria-label=\"clear filter and search\"\n          color=\"primary\"\n          outline\n          onClick={handleClear}\n        >\n          <ClearIconWrapper aria-hidden=\"true\">×</ClearIconWrapper>\n        </Button>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n};\n\nconst ClearIconWrapper = styled.span`\n  float: right;\n  font-size: 1.5rem;\n  font-weight: 700;\n  line-height: 1;\n  text-shadow: 0 1px 0 #fff;\n  opacity: 0.5;\n`;\n\nexport default SearchFilter;\n","import React, { useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'reactstrap';\nimport { useQueryParam, StringParam } from 'use-query-params';\nimport styled from 'styled-components';\nimport api from '../api';\nimport { IRecipe } from '../types';\nimport { filterRecipes, getRecipeTypeOptions, sortRecipes } from '../utils';\nimport Counter from './Counter';\nimport Recipe from './Recipe';\nimport SearchFilter from './SearchFilter';\n\nconst App: React.FC = () => {\n  const [spreadsheetId] = useQueryParam('spreadsheetId', StringParam);\n  const [key] = useQueryParam('key', StringParam);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState(null);\n  const [recipes, setRecipes] = useState<IRecipe[]>([]);\n  const [recipeTypeQuery, setRecipeType] = useQueryParam('type', StringParam);\n  const [recipeNameQuery, setRecipeNameQuery] = useQueryParam(\n    'name',\n    StringParam\n  );\n  const filters = {\n    recipeTypeQuery,\n    recipeNameQuery\n  };\n  const recipeTypeOptions = getRecipeTypeOptions({\n    recipes,\n    filters,\n    currentValue: recipeTypeQuery\n  });\n  const filteredRecipes = filterRecipes({ recipes, filters });\n\n  useEffect(() => {\n    const fetchRecipes = async (): Promise<void> => {\n      setError(null);\n      setLoading(true);\n\n      try {\n        const nextRecipes = await api.getRecipes(spreadsheetId, key);\n        setRecipes(sortRecipes(nextRecipes));\n      } catch (err) {\n        setError(err);\n      }\n      setLoading(false);\n    };\n\n    fetchRecipes();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Container>\n      <Row>\n        <Col\n          xs={{ size: 12, offset: 0 }}\n          sm={{ size: 10, offset: 1 }}\n          md={{ size: 12, offset: 0 }}\n          lg={{ size: 8, offset: 2 }}\n          className=\"text-center\"\n        >\n          <h1 className=\"mt-3\">Recipes</h1>\n          {(() => {\n            if (loading) {\n              return <p className=\"text-muted\">Loading recipes...</p>;\n            }\n\n            if (error) {\n              return <p className=\"text-danger\">Error loading recipes!</p>;\n            }\n\n            if (recipes.length) {\n              return (\n                <>\n                  <SearchFilterCounterWrapper>\n                    <SearchFilter\n                      recipeType={recipeTypeQuery}\n                      recipeTypeOptions={recipeTypeOptions}\n                      handleRecipeTypeChange={setRecipeType}\n                      recipeName={recipeNameQuery}\n                      handleRecipeNameChange={value => {\n                        if (!value) {\n                          setRecipeNameQuery(undefined);\n                        } else {\n                          setRecipeNameQuery(value);\n                        }\n                      }}\n                      handleClear={() => {\n                        setRecipeType(undefined);\n                        setRecipeNameQuery(undefined);\n                      }}\n                    />\n                    <Counter count={filteredRecipes.length} />\n                  </SearchFilterCounterWrapper>\n                  {filteredRecipes.length ? (\n                    filteredRecipes.map(({ id, name, type, link, notes }) => (\n                      <Recipe\n                        key={id}\n                        name={name}\n                        type={type}\n                        link={link}\n                        notes={notes}\n                        nameQuery={recipeNameQuery}\n                        shouldShowType={!recipeTypeQuery}\n                      />\n                    ))\n                  ) : (\n                    <p>\n                      No <strong>{recipeTypeQuery}</strong> recipes matching{' '}\n                      <strong>{recipeNameQuery}.</strong>\n                    </p>\n                  )}\n                </>\n              );\n            }\n\n            return (\n              <p role=\"alert\" aria-live=\"assertive\">\n                No recipes.\n              </p>\n            );\n          })()}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nconst SearchFilterCounterWrapper = styled.div`\n  margin-bottom: 16px;\n`;\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport App from './App';\n\nconst Root: React.FC = () => (\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>\n);\n\nexport default Root;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/Root';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <Root />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}